version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: robotics_postgres
    environment:
      POSTGRES_DB: robotics_telemetry
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - robotics_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: robotics_backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: robotics_telemetry
      DB_USER: postgres
      DB_PASSWORD: password123
      JWT_SECRET: development_jwt_secret_key
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000
      TELEMETRY_UPDATE_INTERVAL: 500
      ROBOT_COUNT: 5
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - robotics_network
    command: npm run dev

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: robotics_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_WS_URL: http://localhost:3001
      REACT_APP_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - robotics_network
    command: npm start

  # Redis for session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: robotics_redis
    ports:
      - "6379:6379"
    networks:
      - robotics_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:

networks:
  robotics_network:
    driver: bridge
